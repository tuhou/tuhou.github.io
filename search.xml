<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>搭建私有的个人远程RustDesk</title>
    <url>/2024/12/07/RustDesk/</url>
    <content><![CDATA[<h4 id="在Linux服务器搭建RustDesk远程"><a href="#在Linux服务器搭建RustDesk远程" class="headerlink" title="在Linux服务器搭建RustDesk远程"></a>在Linux服务器搭建RustDesk远程</h4><blockquote>
<p>为什么搭建RustDesk，市面上的Todesk、向日葵不能使用吗？</p>
<p>PC端自用，使用Todesk和向日葵确实能满足需求，但是涉及到移动设备的远控时，免费的Todesk、向日葵不支持移动设备远控，同时在PC远控也有诸多限制，而今天介绍到的RustDesk完全没有这些限制，支持多平台（Linux、Windows、macOS、Android）</p>
</blockquote>
<span id="more"></span>

<blockquote>
<p>前置条件：一台公网ip的Linux云服务器</p>
</blockquote>
<p><img src="/images/RustDesk/image-20241207144634301.png" alt="image-20241207144634301"></p>
<p><img src="/images/RustDesk/image-20241207144712331.png" alt="image-20241207144712331"></p>
<h5 id="1、搭建"><a href="#1、搭建" class="headerlink" title="1、搭建"></a>1、搭建</h5><blockquote>
<p>本教程基于Linux（centos）、在宝塔上安装RustDesk服务</p>
<p>项目地址：<code>https://github.com/rustdesk/rustdesk-server/releases/</code></p>
</blockquote>
<p>根据服务器版本下载对应的源码版本，因为我的是x86的，下载linux-amd64就好</p>
<p><img src="/images/RustDesk/image-20241207145705493.png" alt="image-20241207145705493"></p>
<p><img src="/images/RustDesk/image-20241207145608431.png" alt="image-20241207145608431"></p>
<ul>
<li>1、安装宝塔：<code>https://www.bt.cn/new/download.html</code></li>
</ul>
<p>CentOS安装宝塔</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">url=https://download.bt.cn/install/install_lts.sh;if [ -f /usr/bin/curl ];then curl -sSO $url;else wget -O install_lts.sh $url;fi;bash install_lts.sh ed8484bec</span><br></pre></td></tr></table></figure>

<p><img src="/images/RustDesk/image-20241207150305917.png" alt="image-20241207150305917"></p>
<p>安装完成根据生成的外网地址或者内网地址登录宝塔，此时如果登录不了，请在服务器防火墙放通对应的端口，本例为：35011</p>
<p>第一次登录需要注册一个宝塔账号，注册后登录，如下图所示：</p>
<p><img src="/images/RustDesk/image-20241207150559196.png" alt="image-20241207150559196"></p>
<ul>
<li>2、配置RustDesk服务</li>
</ul>
<p><img src="/images/RustDesk/image-20241207150749818.png" alt="image-20241207150749818"></p>
<p>点击文件，选择你喜欢的文件夹创建rustdesk文件，本例为www下</p>
<p><img src="/images/RustDesk/image-20241207151238636.png" alt="image-20241207151238636"></p>
<p><img src="/images/RustDesk/image-20241207151306473.png" alt="image-20241207151306473"></p>
<p>解压文件，可以看到最后就三个文件</p>
<p><img src="/images/RustDesk/image-20241207151401238.png" alt="image-20241207151401238"></p>
<p>因为我们需要rustdesk服务时刻运行，并能自动重启，那么需要搞一个守护程序。软件商店搜索：进程守护 安装</p>
<p><img src="/images/RustDesk/image-20241207151620540.png" alt="image-20241207151620540"></p>
<p>添加守护程序，点击设置-&gt; 添加守护程序 -&gt; 确认</p>
<p><img src="/images/RustDesk/image-20241207151734249.png" alt="image-20241207151734249"></p>
<p>目录和启动命令以我的为例：</p>
<p><img src="/images/RustDesk/image-20241207152041447.png" alt="image-20241207152041447"></p>
<p><img src="/images/RustDesk/image-20241207152057817.png" alt="image-20241207152057817"></p>
<p>守护程序设置好后，状态为Running时为正常</p>
<p><img src="/images/RustDesk/image-20241207152314070.png" alt="image-20241207152314070"></p>
<p>在文件列表中会生成一些文件，记住id_xx.pub里面为中继器的key，保存好后续使用</p>
<p><img src="/images/RustDesk/image-20241207161233449.png" alt="image-20241207161233449"></p>
<p>端口放通：你需要放通21116 - TCP&#x2F;UDP、21117 - TCP</p>
<p>如图在安全中添加，当然在你的服务器安全组也需要放通</p>
<p><img src="/images/RustDesk/image-20241207161445650.png" alt="image-20241207161445650"></p>
<ul>
<li>3、测试</li>
</ul>
<p>在软件中输入刚才对应的id和中继服务器以及key，主页状态为就绪说明已经成功，之后找两台设备使用即可</p>
<p><img src="/images/RustDesk/image-20241207161726741.png" alt="image-20241207161726741"></p>
<p><img src="/images/RustDesk/image-20241207161830887.png" alt="image-20241207161830887"></p>
<h5 id="附：小店提供安装和中继器租用服务，有需要可以淘宝扫码查看"><a href="#附：小店提供安装和中继器租用服务，有需要可以淘宝扫码查看" class="headerlink" title="附：小店提供安装和中继器租用服务，有需要可以淘宝扫码查看"></a>附：小店提供安装和中继器租用服务，有需要可以淘宝扫码查看</h5><p><img src="/images/rustdesk.png" alt="pgsql"></p>
]]></content>
      <categories>
        <category>瞎折腾</category>
      </categories>
      <tags>
        <tag>RustDesk</tag>
        <tag>远程协助</tag>
      </tags>
  </entry>
  <entry>
    <title>docker镜像加速教程</title>
    <url>/2024/12/31/docker01/</url>
    <content><![CDATA[<h4 id="docker镜像下载教程"><a href="#docker镜像下载教程" class="headerlink" title="docker镜像下载教程"></a>docker镜像下载教程</h4><ul>
<li>购买多个秘钥的请注意，一个一个下载，下载存在延迟，以免秘钥浪费</li>
</ul>
<span id="more"></span>

<h5 id="1、镜像搜索"><a href="#1、镜像搜索" class="headerlink" title="1、镜像搜索"></a>1、镜像搜索</h5><p>地址：<code>http://113.133.183.165:45678/</code></p>
<p><img src="/images/docker01/1.png" alt="image-1"></p>
<p>输入镜像名称：点击查询，等待一段时间会展示搜索结果，同时将查询到的结果展示到下拉的架构列表</p>
<h4 id="2、镜像下载"><a href="#2、镜像下载" class="headerlink" title="2、镜像下载"></a>2、镜像下载</h4><p><img src="/images/docker01/2.png" alt="image-20241210192956945"></p>
<p>选择对应的架构，输入秘钥点击下载，等待一段时间加载下载地址</p>
<h4 id="3、下载文件"><a href="#3、下载文件" class="headerlink" title="3、下载文件"></a>3、下载文件</h4><p><img src="/images/docker01/3.png" alt="image-20241210192956945"></p>
<p>默认户自行下载，若是不小心没保存之类，不要刷新页面，直接点击下载链接，同样可以下载</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>postgresql安装</title>
    <url>/2024/12/04/postgresql01/</url>
    <content><![CDATA[<h4 id="沉浸式安装postgresql-windows版"><a href="#沉浸式安装postgresql-windows版" class="headerlink" title="沉浸式安装postgresql-windows版"></a>沉浸式安装postgresql-windows版</h4><h5 id="注意：pgsql对路径严格要求、安装路径不能存在中文，否则会报错"><a href="#注意：pgsql对路径严格要求、安装路径不能存在中文，否则会报错" class="headerlink" title="注意：pgsql对路径严格要求、安装路径不能存在中文，否则会报错"></a>注意：pgsql对路径严格要求、安装路径不能存在中文，否则会报错</h5><span id="more"></span>

<h5 id="1、下载安装包"><a href="#1、下载安装包" class="headerlink" title="1、下载安装包"></a>1、下载安装包</h5><p><code>https://www.enterprisedb.com/downloads/postgres-postgresql-downloads</code></p>
<p>在下载页面下载你需要版本的pgsql安装包</p>
<h5 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h5><p><img src="/images/postgresql01/image-20241204155029168.png" alt="image-20241204155029168"></p>
<p><img src="/images/postgresql01/image-20241204155126233.png" alt="image-20241204155126233"></p>
<p><img src="/images/postgresql01/image-20241204155203948.png" alt="image-20241204155203948"></p>
<p><img src="/images/postgresql01/image-20241204155219197.png" alt="image-20241204155219197"></p>
<p><img src="/images/postgresql01/image-20241204155403455.png" alt="image-20241204155403455"></p>
<p><img src="/images/postgresql01/image-20241204155333693.png" alt="image-20241204155333693"></p>
<p><img src="/images/postgresql01/image-20241204155419481.png" alt="image-20241204155419481"></p>
<p><img src="/images/postgresql01/image-20241204155434572.png" alt="image-20241204155434572"></p>
<p><img src="/images/postgresql01/image-20241204155447005.png" alt="image-20241204155447005"></p>
<p>next之后就开始等待吧，结束后直接finish，然后取消Stack Builder就好</p>
<p><img src="/images/postgresql01/image-20241204161353769.png" alt="image-20241204161353769"></p>
<p>到此，windows的pgsql安装已经完成。简单测试下</p>
<p><img src="/images/postgresql01/image-20241204164335658.png" alt="image-20241204164335658"></p>
<h5 id="3、演示只是在完全正常的情况下，安装pgsql会出现各种各样的报错，这个我们后续慢慢道来。"><a href="#3、演示只是在完全正常的情况下，安装pgsql会出现各种各样的报错，这个我们后续慢慢道来。" class="headerlink" title="3、演示只是在完全正常的情况下，安装pgsql会出现各种各样的报错，这个我们后续慢慢道来。"></a>3、演示只是在完全正常的情况下，安装pgsql会出现各种各样的报错，这个我们后续慢慢道来。</h5><h5 id="附：-小店提供安装服务，有需要可以淘宝扫码查看"><a href="#附：-小店提供安装服务，有需要可以淘宝扫码查看" class="headerlink" title="附： 小店提供安装服务，有需要可以淘宝扫码查看"></a>附： 小店提供安装服务，有需要可以淘宝扫码查看</h5><p><img src="/images/pgsql.png" alt="pgsql"></p>
]]></content>
      <categories>
        <category>postgresql</category>
      </categories>
      <tags>
        <tag>postgresql</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo搭建</title>
    <url>/2024/11/26/hexo01/</url>
    <content><![CDATA[<p> 网址：tuhou.github.io</p>
<p>从搭建hexo到发布到github，以及简单的优化</p>
<p>简单介绍hexo：Hexo 是一个快速、简洁且高效的博客框架。 Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他标记语言）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<span id="more"></span>

<p>依赖：本文以ubuntu为例，需要安装node和git</p>
<h5 id="1、node安装："><a href="#1、node安装：" class="headerlink" title="1、node安装："></a>1、node安装：</h5><p>下载地址：<code>https://nodejs.cn/download/</code></p>
<p><img src="/images/hexo01/image-20241126214015683.png" alt="image-20241126214015683"></p>
<p>下载对应的版本双击安装</p>
<p>安装完成后：创建对应的软链接</p>
<p><code>ln -s /home/node/（你的安装目录） /usr/local/bin</code></p>
<p><code>ln -s /home/npm/（你的安装目录） /usr/local/bin</code></p>
<h5 id="2、安装git"><a href="#2、安装git" class="headerlink" title="2、安装git"></a>2、安装git</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure>

<p>此时需注意：使用npm的时候可能会报错，此处需要设置npm的源，因为淘宝源已经过期，那么当前将其设置为新的。</p>
<p><code>npm config set registry https://registry.npmmirror.com/</code></p>
<h5 id="3、安装hexo"><a href="#3、安装hexo" class="headerlink" title="3、安装hexo"></a>3、安装hexo</h5><p><code>npm install -g hexo-cli</code></p>
<p>此文章以我的目录为例，创建</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir /home/blog</span><br><span class="line">cd /home/blog</span><br></pre></td></tr></table></figure>

<p>hexo初始化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init</span><br><span class="line">hexo g</span><br><span class="line">hexo s --debug</span><br></pre></td></tr></table></figure>

<p>此时，你可以看到本地<code>http://localhost:4000</code>就能看到对应的网站了</p>
<p><img src="/images/hexo01/image-20241126222900783.png" alt="image-20241126222900783"></p>
<p>当然安装hexo并不是我们的最终目的，我们要将hexo上传到github，并生成一个github的网站</p>
<h5 id="4、github端设置"><a href="#4、github端设置" class="headerlink" title="4、github端设置"></a>4、github端设置</h5><p>1、github端创建一个公共的仓库，注意名称命名为 xxx.github.io必须的（xxx设置为你自己想设置的），确认就好</p>
<p><img src="/images/hexo01/image-20241126230358114.png" alt="image-20241126230358114"></p>
<p>2、在服务器上，配置本地用户信息</p>
<ul>
<li>使用 <code>git config --global user.name &quot;name&quot; </code>配置本地用户信息，name为你的git账户名</li>
<li>使用 <code>git config --global user.email &quot;xxx@xx.com&quot;</code>配置本地邮箱，email为你git账户邮箱</li>
<li>使用  <code>ssh-keygen -t rsa -C&quot;xxx@xx.com&quot;</code> 命令生成本地私钥和密钥信息，需要输入yes是输入y<ul>
<li>秘钥生成后，在本地<code>~/.ssh</code>，在此路径上找到git的密码文件 id_rsa.pub</li>
</ul>
</li>
</ul>
<p>3、进行git与github的授权认证</p>
<ul>
<li>在github设置页面，选择左侧<code>ssh and GPG keys</code> 名称随意，key为id_rsa.pub添加</li>
</ul>
<p><img src="/images/hexo01/image-20241127002414324.png" alt="image-20241127002414324"></p>
<p><img src="/images/hexo01/image-20241127002456565.png" alt="image-20241127002456565"></p>
<p>此时回到服务器，命令行输入<code>ssh -T git@github.com</code>检查可以与远程进行统信，会出现Hi …说明授权成功</p>
<p>4、以为目前github已经不支持密码授权，所以下载需要搞一个token： settings -&gt; Developer settings</p>
<p><img src="/images/hexo01/image-20241127003406845.png" alt="image-20241127003406845"></p>
<p>创建后记得记住，因为只展示一次</p>
<p>5、在hexo的主配置文件_config.yml中配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/tuhou/tuhou.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p><img src="/images/hexo01/image-20241127003603610.png" alt="image-20241127003603610"></p>
<h5 id="5、文章上线到github"><a href="#5、文章上线到github" class="headerlink" title="5、文章上线到github"></a>5、文章上线到github</h5><p>会让你输入名称和token，可以看到已经有了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p><img src="/images/hexo01/image-20241127003823703.png" alt="image-20241127003823703"></p>
<p><img src="/images/hexo01/image-20241127004215902.png" alt="image-20241127004215902"></p>
<p>后续的美化暂时停下，等后续再聊</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>mimiciv医疗数据库安装（icu+hosp）</title>
    <url>/2024/12/05/postgresql02/</url>
    <content><![CDATA[<h4 id="windows安装mimic医疗数据库"><a href="#windows安装mimic医疗数据库" class="headerlink" title="windows安装mimic医疗数据库"></a>windows安装mimic医疗数据库</h4><h5 id="注意：mimic需要硬盘空间120G左右，请预留足够的空间"><a href="#注意：mimic需要硬盘空间120G左右，请预留足够的空间" class="headerlink" title="注意：mimic需要硬盘空间120G左右，请预留足够的空间"></a>注意：mimic需要硬盘空间120G左右，请预留足够的空间</h5><p>前置条件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、安装7z</span><br><span class="line">2、安装postgresql</span><br><span class="line">3、mimic数据包 https://physionet.org/content/mimiciv/2.2/</span><br><span class="line">4、mimic数据生成包：https://github.com/MIT-LCP/mimic-code</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h5 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h5><p>以mimiciv2.2为例，请确保前置条件已经搞好。</p>
<p>在D盘创建一个数据根目录MIMIC，用于后续的设置，我是直接将相关的数据都放入了MIMIC</p>
<p><img src="/images/postgresql02/image-20241205200313591.png" alt="image-20241205200313591"></p>
<p>登录到pgsql的shell中</p>
<p><img src="/images/postgresql02/image-20241205153150243.png" alt="image-20241205153150243"></p>
<p><img src="/images/postgresql02/image-20241205153223718.png" alt="image-20241205153223718"></p>
<h5 id="2、安装命令"><a href="#2、安装命令" class="headerlink" title="2、安装命令"></a>2、安装命令</h5><ul>
<li>1、创建数据库</li>
</ul>
<p>Drop database if exists mimiciv;</p>
<p>create database mimiciv owner postgres;</p>
<p><img src="/images/postgresql02/image-20241205154720915.png" alt="image-20241205154720915"></p>
<ul>
<li>设置默认目录与编码</li>
</ul>
<p><img src="/images/postgresql02/image-20241205154907509.png" alt="image-20241205154907509"></p>
<p>在命令行依次执行create、load_7z、constraint、index.sql文件</p>
<p><img src="/images/postgresql02/image-20241205170955572.png" alt="image-20241205170955572"></p>
<p>若出现permission deny，将所有的”&quot;替换成 “&#x2F;“</p>
<p><img src="/images/postgresql02/image-20241205171222144.png" alt="image-20241205171222144"></p>
<p>执行到load_7z.sql导入数据、根据电脑性能，会等待1-2个小时 <code>\i D:/MIMIC/load_7z.sql</code></p>
<p><img src="/images/postgresql02/image-20241205200140882.png" alt="image-20241205200140882"></p>
<p>执行<code>\i D:/MIMIC/constraint.sql</code>创建主键</p>
<p><img src="/images/postgresql02/image-20241206142203677.png" alt="image-20241206142203677"></p>
<p>执行<code>\i D:/MIMIC/index.sql</code>创建索引</p>
<p><img src="/images/postgresql02/image-20241206151808889.png" alt="image-20241206151808889"></p>
<h5 id="3、查看"><a href="#3、查看" class="headerlink" title="3、查看"></a>3、查看</h5><p>hosp</p>
<p><img src="/images/postgresql02/image-20241206181931467.png" alt="image-20241206181931467"></p>
<p>icu</p>
<p><img src="/images/postgresql02/image-20241206181948265.png" alt="image-20241206181948265"></p>
<h5 id="附：小店提供安装服务，有需要可以淘宝扫码查看"><a href="#附：小店提供安装服务，有需要可以淘宝扫码查看" class="headerlink" title="附：小店提供安装服务，有需要可以淘宝扫码查看"></a>附：小店提供安装服务，有需要可以淘宝扫码查看</h5><p><img src="/images/pgsql.png" alt="pgsql"></p>
]]></content>
      <categories>
        <category>postgresql</category>
      </categories>
      <tags>
        <tag>postgresql</tag>
        <tag>MIMIC</tag>
      </tags>
  </entry>
  <entry>
    <title>mimiciv医疗数据库安装（derived衍生表）</title>
    <url>/2024/12/06/postgresql03/</url>
    <content><![CDATA[<h4 id="windows安装mimic医疗数据库衍生表derived"><a href="#windows安装mimic医疗数据库衍生表derived" class="headerlink" title="windows安装mimic医疗数据库衍生表derived"></a>windows安装mimic医疗数据库衍生表derived</h4><p>前置条件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">安装git（全部默认安装即可）：下载地址 https://git-scm.com/downloads</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>紧接上回、已经安装完了icu和hosp数据，现在生成衍生表</p>
<p>衍生表sql路径<code>D:\mimic-code-main\mimic-iv\concepts_postgres</code></p>
<p><img src="/images/postgresql03/image-20241206193638730.png" alt="image-20241206193638730"></p>
<h5 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h5><ul>
<li>设置路径</li>
</ul>
<p><img src="/images/postgresql03/image-20241206193843842.png" alt="image-20241206193843842"></p>
<ul>
<li><p>执行postgres-functions.sql生成对应的方法<code>\i D:/mimic-code-main/mimic-iv/concepts_postgres/postgres-functions.sql</code></p>
<p><img src="/images/postgresql03/image-20241206194003957.png" alt="image-20241206194003957"></p>
</li>
<li><p>执行shell生成衍生表格数据文件夹postgres</p>
</li>
</ul>
<p><img src="/images/postgresql03/image-20241206194622743.png" alt="image-20241206194622743"></p>
<p><img src="/images/postgresql03/image-20241206194818354.png" alt="image-20241206194818354"></p>
<ul>
<li>生成衍生表格数据<ul>
<li>修改postgres-make-concepts.sql</li>
</ul>
</li>
</ul>
<p><img src="/images/postgresql03/image-20241206195056707.png" alt="image-20241206195056707"></p>
<ul>
<li>执行</li>
</ul>
<p><img src="/images/postgresql03/image-20241206195813987.png" alt="image-20241206195813987"></p>
<p>之后就是漫长的等待，直到结束就好。</p>
<h5 id="附：小店提供安装服务，有需要可以淘宝扫码查看"><a href="#附：小店提供安装服务，有需要可以淘宝扫码查看" class="headerlink" title="附：小店提供安装服务，有需要可以淘宝扫码查看"></a>附：小店提供安装服务，有需要可以淘宝扫码查看</h5><p><img src="/images/pgsql.png" alt="pgsql"></p>
]]></content>
      <categories>
        <category>postgresql</category>
      </categories>
      <tags>
        <tag>postgresql</tag>
        <tag>MIMIC</tag>
      </tags>
  </entry>
  <entry>
    <title>港股打新网</title>
    <url>/2021/10/20/spider-01/</url>
    <content><![CDATA[<p> 网址：aHR0cHM6Ly93d3cubGlhbmdodWFpcG8uY29tLyMvbGlzdGVkX3N0b2NrX2xpc3Q&#x3D;</p>
<p>1、网站进行简要分析</p>
<p>打开开发者工具，抓包</p>
<span id="more"></span>

<p><img src="/images/spider01/1.png" alt="图片标题"></p>
<p> 请求成功后，返回一长段的数据data，需要的数据应该就是对data进行解密了，现在开始找解密点</p>
<p>2、寻找解密点</p>
<p>网页打上XHR断点，点击翻页</p>
<p><img src="/images/spider01/2.png" alt="图片标题"></p>
<p> 网页被断住，向上找堆栈，到pagechange发现有个JSON.parse这不就是解密点？打个断点，放开xhr断点，在进行一次翻页</p>
<p><img src="/blog/spider/spider-01/3.png" alt="图片标题"></p>
<p>判断加密点没错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var s = JSON.parse(Object(o.a)(a.data));</span><br></pre></td></tr></table></figure>

<p>主要函数为Object(o.a)，断点进入</p>
<p><img src="/images/spider01/4.png" alt="图片标题"></p>
<p> 这不就是一个AES解密函数吗，废话不多说，码代码吧</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const CryptoJS = require(&#x27;crypto-js&#x27;);</span><br><span class="line"></span><br><span class="line">function get_data(t)&#123;</span><br><span class="line">    var c = CryptoJS.enc.Utf8.parse(&quot;eFgabcda1bcda12bc2bcdePgefgadefg&quot;);</span><br><span class="line">    var n = CryptoJS.enc.Utf8.parse();</span><br><span class="line">    var e = c,</span><br><span class="line">        s = n,</span><br><span class="line">        i = CryptoJS.enc.Base64.parse(t),</span><br><span class="line">        a = CryptoJS.enc.Base64.stringify(i);</span><br><span class="line">    return CryptoJS.AES.decrypt(a, e, &#123;</span><br><span class="line">                iv: s,</span><br><span class="line">                mode: CryptoJS.mode.ECB,</span><br><span class="line">                padding: CryptoJS.pad.Pkcs7</span><br><span class="line">            &#125;).toString(CryptoJS.enc.Utf8).toString()</span><br><span class="line">    &#125;  </span><br></pre></td></tr></table></figure>

<p>　结果：</p>
<p> <img src="/images/spider01/5.png" alt="图片标题"></p>
<p> <img src="/images/spider01/6.png" alt="图片标题"></p>
<p> 全部代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import execjs</span><br><span class="line"></span><br><span class="line">def get_data():</span><br><span class="line">    url = &#x27;https://api.lianghuaipo.com/hk_ipo/get_paged_listed_stock_list&#x27;</span><br><span class="line">    headers = &#123;</span><br><span class="line">        &#x27;user-agent&#x27;:&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.114 Safari/537.36&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line">    data = &#123;</span><br><span class="line">        &#x27;now_page&#x27;: 1,</span><br><span class="line">        &#x27;page_cnt&#x27;: 30</span><br><span class="line">    &#125;</span><br><span class="line">    res = requests.post(url=url,headers=headers,data=data).json()</span><br><span class="line">    return res[&#x27;data&#x27;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">js = &#x27;&#x27;&#x27;</span><br><span class="line">const CryptoJS = require(&#x27;crypto-js&#x27;);</span><br><span class="line">function get_data(t)&#123;</span><br><span class="line">    var c = CryptoJS.enc.Utf8.parse(&quot;eFgabcda1bcda12bc2bcdePgefgadefg&quot;);</span><br><span class="line">    var n = CryptoJS.enc.Utf8.parse();</span><br><span class="line">    var e = c;</span><br><span class="line">    var s = n;</span><br><span class="line">    var i = CryptoJS.enc.Base64.parse(t);</span><br><span class="line">    var a = CryptoJS.enc.Base64.stringify(i);</span><br><span class="line">    return CryptoJS.AES.decrypt(a, e, &#123;</span><br><span class="line">        iv: s,</span><br><span class="line">        mode: CryptoJS.mode.ECB,</span><br><span class="line">        padding: CryptoJS.pad.Pkcs7</span><br><span class="line">    &#125;).toString(CryptoJS.enc.Utf8).toString()</span><br><span class="line">&#125;</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    data = get_data()</span><br><span class="line">    response = execjs.compile(js).call(&#x27;get_data&#x27;,data)</span><br><span class="line">    print(response)</span><br></pre></td></tr></table></figure>

<p>　　</p>
]]></content>
      <categories>
        <category>逆向</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
</search>
